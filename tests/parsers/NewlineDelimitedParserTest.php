<?php

namespace ProtoMapper\Parsers;
require_once '../examples/types.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-03 at 02:43:46.
 */
class NewlineDelimitedParserTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var NewlineDelimitedParser
     */
    protected $object;
    protected $binding;
    protected $configLoader;
    protected $mappingConfig = <<<EOL
        <bind source="summary" target="activities" parser="ProtoMapper\Parsers\NewlineDelimitedParser" type="Activity">
            <data>
                <bind source="." target="description" type="string" />
            </data>
        </bind>
EOL;
    protected $sampleData = "test\ntest2\ntest3";
    

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->configLoader = new \ProtoMapper\Config\ConfigLoader();
        $xml = simplexml_load_string($this->mappingConfig);
        $this->binding = $this->configLoader->createBinding($xml);
    }
    
    /**
     * @covers Rexume\Lib\Parsers\NewLineDelimitedParser::parse
     */
    public function testParse() {
        //test that it can parse primitive types
        $this->object = new NewlineDelimitedParser($this->binding->bindings(), 'string');
        $results = $this->object->parse($this->sampleData);
        //check that parsing works fine
        $this->assertEquals(3, count($results));
        $this->assertEquals("test", $results[0]);
        $this->assertEquals("test2", $results[1]);
        $this->assertEquals("test3", $results[2]);
        
        //test that it can parse complex types. use 'Activity' object
        $this->object = new NewlineDelimitedParser($this->binding->bindings(), 'Activity');
        $results = $this->object->parse($this->sampleData);
        //check that parsing breaks the data into an array of the complex type
        $this->assertCount(3, $results);
        foreach($results as $result){
            $this->assertInstanceOf('Activity', $result);
        }
        $this->assertEquals("test", $results[0]->description);
        $this->assertEquals("test2", $results[1]->description);
        $this->assertEquals("test3", $results[2]->description);
        
        //no parameters should behave like a normal parser
        $this->object = new NewlineDelimitedParser();
        $results = $this->object->parse($this->sampleData);
        //check that parsing works fine
        $this->assertCount(3, $results);
        $this->assertEquals("test", $results[0]);
        $this->assertEquals("test2", $results[1]);
        $this->assertEquals("test3", $results[2]);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

}

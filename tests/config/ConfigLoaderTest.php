<?php

namespace ProtoMapper\Config;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-01 at 03:11:37.
 */
class ConfigLoaderTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ConfigLoader
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        //BEGIN: test loading using the configuration file in "/examples/protocol.config.xml"
        $this->object = new ConfigLoader();
		$this->xmlFile = '..//examples//protocol.config.xml';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers ProtoMapper\Config\ConfigLoader::testParseProtocols
     * @todo   Implement testParseProtocols().
     */
    public function testParseProtocols() {
    	//NOTE: load is a wrapper that calls 'testParseProtocols' internally after reading xml file
        $this->object->load($this->xmlFile);
        $definition = $this->object->getProtocolDefinition("LinkedIn", "Data");
        //TODO: validate contents
        $xml = \simplexml_load_file($this->xmlFile);
        $configMappings = $xml->xpath("//mapping");
        $this->assertEquals(count($configMappings), count($definition->mappings()));
		foreach($definition->mappings() as $loadedMapping){
			$mappingConfigs = $xml->xpath("//mapping[@name='{$loadedMapping->name()}']");
            $this->assertTrue(!empty($mappingConfigs));
			foreach($mappingConfigs as $mapping)
			{
				$this->assertEquals((string)$mapping['name'], $loadedMapping->name());
				$this->assertEquals((string)$mapping['type'], $loadedMapping->type());
                foreach($loadedMapping->bindings() as $loadedBinding)
                {
                    $bindConfigs = $mapping->xpath("bind[@source='{$loadedBinding->source()}' and @target='{$loadedBinding->target()}']");
					$this->assertTrue(!empty($bindConfigs));
					foreach($bindConfigs as $bindConfig){
						$this->assertEquals((string)$bindConfig['source'], $loadedBinding->source());
						$this->assertEquals((string)$bindConfig['target'], $loadedBinding->target());
                        if(!empty($bindConfig['type'])){
                            $this->assertEquals((string)$bindConfig['type'], $loadedBinding->type());
                        }
						else{
                            $this->assertEquals($loadedBinding->type(), \ProtoMapper\Binds\ProtocolBind::DEFAULT_TYPE);
                        }
						if(!empty($bindConfig['parser'])){
                            $this->assertEquals((string)$bindConfig['parser'], $loadedBinding->parser());
                        }
					}
                }
			}
		}
    }
}
